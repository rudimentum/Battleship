type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "x"}, {"E4", "m"},
                {"B9", "x"}, {"C9", "x"}, {"D9", "x"}, {"E9", "m"}, {"F3", "x"}, {"F4", "x"},
                {"F5", "x"}, {"F6", "x"}, {"F7", "x"}, {"F10", "m"}, {"G8", "m"}, {"G5", "m"},
                {"H2", "m"}, {"I2", "x"}, {"J2", "x"}, {"J6", "m"}, {"J8", "x"}, {"J9", "x"}, {"J10", "x"}
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("Your program didn't print a massage about game start");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "m"}, {"F5", "m"},
                {"B5", "x"}, {"B4", "m"}, {"C5", "x"}, {"H8", "m"}, {"F8", "x"}, {"G8", "m"},
                {"E8", "x"}, {"D8", "x"}, {"C8", "x"}, {"D8", "x"}, {"I9", "m"}, {"H1", "x"},
                {"I1", "m"}, {"H2", "x"}, {"H3", "x"}, {"E2", "m"}, {"I8", "m"}, {"J7", "x"},
                {"J8", "m"}, {"J6", "x"}, {"J5", "x"}, {"J4", "x"}, {"J3", "x"},
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        String validateShots(TestedProgram main, String[][] commands) {

            String output = null;

            for (String[] item : commands) {
                output = main.execute(item[0]);
                if (item[1].equals("x")) {
                    if (!checkShot(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected hit in " + item[0]);
                    }
                }
                if (item[1].equals("m")) {
                    if (!checkMissing(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected miss in " + item[0]);
                    }
                }
            }

            return output;
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x");
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }
    }
  learner_created: false
- name: src/battleship/GameLogic.java
  visible: true
  text: |
    package battleship;

    import java.util.*;

    public class GameLogic {
        final static Scanner scanner = new Scanner(System.in);
        private static String[] shipCoordinates;
        private static String shot;
        private final static ArrayList<String> allCoordinates = makeCoordinatesList();

        private static ArrayList<String> makeCoordinatesList() {
            ArrayList<String> coordinates = new ArrayList<>();

            for (char start = 'A'; start <= 'J'; start++) {
                for (int i = 1; i < 11; i++) {
                    coordinates.add(String.format("%c%d", start, i));
                }
            }
            return coordinates;
        }

        public static void play() {
            for (Ship ship : Ship.values()) {
                System.out.printf("Enter the coordinates of the %s (%d cells):%n", ship.getShipName(), ship.getSells());
                GameField.placeShip(getCoordinates(ship.getShipName(), ship.getSells()));
                GameField.printGameField();
            }
            System.out.println("The game starts!");
            GameField.printEmptyField();
            System.out.println("Take a shot!");
            GameField.shooting(setShot());
            GameField.printGameField();
        }

        public static int[] setShot() {
            shot = scanner.nextLine().toUpperCase().trim();

            if (!allCoordinates.contains(shot)) {
                System.out.println("Error! You entered wrong coordinates! Try again:");
                setShot();
            }
            int row = shot.charAt(0) - 'A' + 1;
            int column = Integer.parseInt(shot.substring(1));
            return new int[]{row, column};
        }

        private static String[] setCoordinates() {
            while (true) {
                try {
                    shipCoordinates = scanner.nextLine().toUpperCase().split("\\s+");
                    for (int i = 0; i < 2; i++) {
                        if (!allCoordinates.contains(shipCoordinates[i])) {
                            System.out.println("Error! Wrong ship location! Try again:");
                            setCoordinates();
                        }
                    }
                    break;
                } catch (ArrayIndexOutOfBoundsException e) {
                    System.out.println("Error! Wrong ship location! Try again:");
                }
            }
            return shipCoordinates;
        }

        /**
         * Implement a method for check entered coordinates
         * @param sells of ship (5 - aircraft carrier, 4 - battleship, 3 - submarine, 3 - cruiser, 2 - destroyer)
         * @return int[4] with start and final coordinates of ship
         */
        private static int[] getCoordinates(String shipName, int sells) {
            shipCoordinates = setCoordinates();
            String startCoordinate = shipCoordinates[0];
            String finalCoordinate = shipCoordinates[1];

            int startRow = startCoordinate.charAt(0) - 'A' + 1;
            int startColumn = Integer.parseInt(startCoordinate.substring(1));
            int finalRow = finalCoordinate.charAt(0) - 'A' + 1;
            int finalColumn = Integer.parseInt(finalCoordinate.substring(1));

            int[] coordinates = fixDirection(startRow, startColumn, finalRow, finalColumn);

            boolean isCorrectLocation = startRow == finalRow || startColumn == finalColumn;
            boolean isRightSize = finalRow - startRow + 1 == sells || Math.abs(finalColumn - startColumn) + 1 == sells;
            boolean isExist = allCoordinates.contains(startCoordinate) && allCoordinates.contains(finalCoordinate);
            boolean isNotTouchOthers = GameField.checkSurroundings(coordinates);

            if (isCorrectLocation && isRightSize && isExist && isNotTouchOthers) {
                return coordinates;
            } else {
                if (!isCorrectLocation) {
                    System.out.println("Error! Wrong ship location! Try again:");
                }
                if (!isRightSize) {
                    System.out.printf("Error! Wrong length of the %s! Try again:%n", shipName);
                }
                if (!isNotTouchOthers) {
                    System.out.println("Error! You placed it too close to another one. Try again:");
                }
                return getCoordinates(shipName, sells);
            }
        }

        /**
         * @return coordinates in the right direction
         * Example: E6 D6 -> D6 E6; F7 F3 -> F3 F7
         */
        private static int[] fixDirection(int startRow, int startColumn, int finalRow, int finalColumn) {
            return finalRow > startRow ? new int[]{startRow, startColumn, finalRow, finalColumn} :
                    finalColumn > startColumn ? new int[]{startRow, startColumn, finalRow, finalColumn} :
                            finalRow < startRow ? new int[]{finalRow, startColumn, startRow, finalColumn} :
                                    new int[]{startRow, finalColumn, finalRow, startColumn};
        }
    }
  learner_created: true
- name: src/battleship/GameField.java
  visible: true
  text: |
    package battleship;

    /**
     * Singleton Lazy Initialization
     */
    public class GameField {
        private static GameField gameField;
        final static String EMPTY = "~";
        final static String PLACE = "O";
        final static String MISS = "M";
        final static String HIT = "X";

        private static final String[][] emptyField = makeField();
        private static String[][] field = makeField();

        private GameField() {}

        public static synchronized GameField getGameField() {
            if (gameField == null) {
                gameField = new GameField();
            }
            return gameField;
        }

        private static String[][] makeField() {
            field = new String[11][11];
            char start = 'A';
            for (int i = 0; i < field.length; i++) {
                for (int j = 0; j < field[i].length; j++) {
                    if (i == 0 && j == 0) {
                        field[i][j] = " ";
                    }
                    else if (i == 0) {
                        field[i][j] = String.valueOf(j);
                    } else if (j == 0){
                        field[i][j] = String.valueOf(start++);
                    } else {
                        field[i][j] = EMPTY;
                    }
                }
            }
            return field;
        }

        public static void placeShip(int[] coordinates) {
            int startRow = coordinates[0];
            int startColumn = coordinates[1];
            int finalRow = coordinates[2];
            int finalColumn = coordinates[3];

            boolean isHorizontal = startRow == finalRow;
            if (isHorizontal) {
                for (; startColumn <= finalColumn; startColumn++) {
                    field[startRow][startColumn] = PLACE;
                }
            } else {
                for (; startRow <= finalRow; startRow++) {
                    field[startRow][startColumn] = PLACE;
                }
            }
        }

        public static boolean checkSurroundings(int[] coordinates) {
            boolean isFree = true;

            int startRow = coordinates[0] == 1 ? 1 : coordinates[0] - 1;
            int startColumn = coordinates[1] == 1? 1 : coordinates[1] - 1;
            int finalRow = coordinates[2] == 10 ? 10 : coordinates[2] + 1;
            int finalColumn = coordinates[3] == 10 ? 10 : coordinates[3] + 1;

            boolean isHorizontal = startRow == finalRow;
            if (isHorizontal) {
                for (; startColumn <= finalColumn; startColumn++) {
                    if (field[startRow][startColumn].equals(PLACE)) {
                        isFree = false;
                        break;
                    }
                }
            } else {
                for (; startRow <= finalRow; startRow++) {
                    if (field[startRow][startColumn].equals(PLACE)) {
                        isFree = false;
                        break;
                    }
                }
            }
            return isFree;
        }

        public static void shooting(int[] shot) {
            int row = shot[0];
            int column = shot[1];
            switch (field[row][column]) {
                case PLACE:
                    System.out.println("You hit a ship!");
                    field[row][column] = HIT;
                    break;
                case EMPTY:
                    System.out.println("You missed!");
                    field[row][column] = MISS;
                    break;
            }
        }

        public static void printGameField() {
            for (String[] x : field) {
                for (String y : x) {
                    System.out.print(y + " ");
                }
                System.out.println();
            }
        }

        public static void printEmptyField() {
            for (String[] x : emptyField) {
                for (String y : x) {
                    System.out.print(y + " ");
                }
                System.out.println();
            }
        }
    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  text: |
    package battleship;

    public enum Ship {
        AIRCRAFT("Aircraft Carrier", 5),
        BATTLESHIP("Battleship", 4),
        SUBMARINE("Submarine", 3),
        CRUISER("Cruiser", 3),
        DESTROYER("Destroyer", 2);

        String shipName;
        int sells;

        Ship(String shipName, int sells) {
            this.shipName = shipName;
            this.sells = sells;
        }

        public String getShipName() {
            return shipName;
        }

        public int getSells() {
            return sells;
        }
    }
  learner_created: true
- name: src/battleship/CellState.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/666/implement
status: Solved
record: 4
